package controllers

import play.api.data.Form
import play.api.db.Database
import play.api.i18n.MessagesApi
import play.api.mvc._

class Application(val db: Database, val messagesApi: MessagesApi) extends Controller with LegacyI18nSupport {

  def index = Action {
    Ok(views.html.index("Your new application is ready."))
  }

  def login = Action { implicit request =>
    // Initializes a database connection using Play's built-in Database API
    db.withConnection { connection =>
      val sql: DSLContext =
        // Creates a jOOQ DSLContext using the transaction
        DSL.using(connection, SQLDialect.POSTGRES_9_4)
      // Fetches all users into classes of the type UserRecord, generated by jOOQ
      val users = context.selectFrom[UserRecord](USER).fetch()
      // Displays the result as a response
      Ok(views.html.login(loginForm))
    }
  }

  // Defines the login form with email and password fields
  val loginForm = Form(
    tuple(
      "email"     -> email,
      "password"  -> text
    )
  )

  def authenticate = Action { implicit request =>
    // Binds the submitted form based on the request's body
    loginForm.bindFromRequest.fold(
      formWithErrors =>
        // Displays the login form again with validation errors
        BadRequest(views.html.login(formWithErrors)),
      login =>
        db.withConnection { connection =>
        val sql = DSL.using(connection, SQLDialect.POSTGRES_9_4)
        val user = Option( sql
            .selectFrom[UserRecord](USER)
            .where(USER.EMAIL.equal(login._1))
            .and(USER.PASSWORD.equal(crypto.sign(login._2)))
            // Executes the query that looks for the first user with the provided credentials
            .fetchOne())

        user.map { u =>
          Ok(s"Hello ${u.getFirstname}")
        } getOrElse {
          BadRequest(
            views.html.login(
              // Sets a global error if there are no users with the provided credentials
              loginForm.withGlobalError("Wrong username or password")
            )
          )
        }
        }
    )
  }
}
